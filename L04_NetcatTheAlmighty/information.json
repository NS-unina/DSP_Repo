{"description":"Learn the basics of the \"hackers' Swiss army knife\"","goal":"<p>Study how to connect to TCP/UDP ports, forge HTTP requests, transfer files and set up a simple Remote Administration scenario with Netcat.</p>","solution":"<h3>Netcat command line options</h3>\n<p>First off, take some time to inspect Netcat's command line options. Access Alice's command line and type:</p>\n<p style=\"padding-left: 30px;\">$ nc-h</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L04_NetcatTheAlmighty/.images/ncat_options.png\" alt=\"Netcat command line options\" width=\"1209\" height=\"939\" /></p>\n<h3>Connecting to a TCP/UDP port</h3>\n<p>You can connect to TCP port 21 on host 193.20.1.4 which runs an ftp server:</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L04_NetcatTheAlmighty/.images/ncat_ftp.png\" alt=\"\" width=\"601\" height=\"115\" /></p>\n<h3>Listening on a TCP/UDP port</h3>\n<p>You can also listen on TCP/UDP ports in order to receive TCP/UDP network connections. Let's try that out by implementing a simple chat using Netcat.</p>\n<p>Go to Alice's command line and type</p>\n<p style=\"padding-left: 30px;\">$ nc -lvp 4444</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L04_NetcatTheAlmighty/.images/chat_alice.png\" alt=\"\" width=\"431\" height=\"73\" /></p>\n<p>Then, access Bob's container and type</p>\n<p style=\"padding-left: 30px;\">$ nc -v 193.20.1.2 4444</p>\n<p>...and start chatting!</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L04_NetcatTheAlmighty/.images/chat_bob.png\" alt=\"\" width=\"545\" height=\"133\" /></p>\n<h3>Banner Grabbing</h3>\n<p>With Netcat you can connect to a Webserver and send HTTP Requests.</p>\n<p>Let's try it out by connecting via TCP to the webserver hosted on 193.20.1.5</p>\n<p style=\"padding-left: 30px;\">$ nc -vn 193.20.1.5 80</p>\n<p>then type:</p>\n<p style=\"padding-left: 30px;\">$ HEAD / HTTP/1.1</p>\n<p>...and see what happens.</p>\n<p>A connection is estabilished, but the HTTP server doesn't seem to respond. After a few seconds the server answers with a 408 Request Timeout status</p>\n<p>&nbsp;<img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L04_NetcatTheAlmighty/.images/timeout.png\" width=\"561\" height=\"213\" /></p>\n<p>...can you tell why?</p>\n<p>Let's take a look at the HTTP RFC 2616, section 5.1.2</p>\n<pre>\"The most common form of Request-URI is that used to identify a\n   resource on an origin server or gateway. In this case the absolute\n   path of the URI MUST be transmitted (see <a href=\"https://tools.ietf.org/html/rfc2616#section-3.2.1\">section 3.2.1</a>, abs_path) as\n   the Request-URI, and the network location of the URI (authority) MUST\n   be transmitted in a Host header field. For example, a client wishing\n   to retrieve the resource above directly from the origin server would\n   create a TCP connection to port 80 of the host \"www.w3.org\" and send\n   the lines:\n\n       GET /pub/WWW/TheProject.html HTTP/1.1\n       Host: www.w3.org\n\n   followed by the remainder of the Request. Note that the absolute path\n   cannot be empty; if none is present in the original URI, it MUST be\n   given as \"/\" (the server root).\"</pre>\n<p>This means that if the Request-Uri only includes the Absolute path to the resource, we have at least give a \"Host\" header, specifying the IP-address/server-name.</p>\n<p>Let's do that by typing:</p>\n<p style=\"padding-left: 30px;\">$ nc&nbsp;-vn 193.20.1.5 80 &lt;&lt; END</p>\n<p style=\"padding-left: 30px;\">$ HEAD / HTTP/1.1</p>\n<p style=\"padding-left: 30px;\">$ Host: 193.20.1.5</p>\n<p style=\"padding-left: 30px;\">$END</p>\n<p>&nbsp;<img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L04_NetcatTheAlmighty/.images/bad_request.png\" width=\"534\" height=\"234\" /></p>\n<p>Now we receive a different status code, but it's still an error (400 Bad Request). Let's go back to our RFC, section 4.1.</p>\n<pre>\"Request (<a href=\"https://tools.ietf.org/html/rfc2616#section-5\">section 5</a>) and Response (<a href=\"https://tools.ietf.org/html/rfc2616#section-6\">section 6</a>) messages use the generic\n   message format of <a href=\"https://tools.ietf.org/html/rfc822\">RFC 822</a> [<a title=\"&quot;Standard for The Format of ARPA Internet Text Messages&quot;\" href=\"https://tools.ietf.org/html/rfc2616#ref-9\">9</a>] for transferring entities (the payload\n   of the message). Both types of message consist of a start-line, zero\n   or more header fields (also known as \"headers\"), an empty line (i.e.,\n   a line with nothing preceding the CRLF) indicating the end of the\n   header fields, and possibly a message-body.\n\n        generic-message = start-line\n                          *(message-header CRLF)\n                          CRLF\n                          [ message-body ]\n        start-line      = Request-Line | Status-Line\"<br /><br /></pre>\n<p>We need to tell the server that the request is ended by sending a CRLF (newline) character after the Host header.</p>\n<p style=\"padding-left: 30px;\">$ nc -vn 193.20.1.5 80 &lt;&lt; END</p>\n<p style=\"padding-left: 30px;\">$ HEAD / HTTP/1.1</p>\n<p style=\"padding-left: 30px;\">$ Host: 193.20.1.5</p>\n<p style=\"padding-left: 30px;\">$</p>\n<p style=\"padding-left: 30px;\">$END</p>\n<p>&nbsp;<img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L04_NetcatTheAlmighty/.images/200_ok.png\" alt=\"\" width=\"520\" height=\"343\" /></p>\n<p>Got it!</p>\n<p>Take a look at the response.</p>\n<p>We discover some useful information about the server: it runs Apache 2.4.7 on Ubuntu. This is an example of the so-called \"Banner Grabbing\", a tecnique used to gather information about services running on a network host.</p>\n<h3>Transferring files using Netcat</h3>\n<p>Netcat can be also used to transfer binary or text files from one computer to another.</p>\n<p>From Alice's command line, let's set up Netcat to listen and accept connections on port 4444 and redirect any input into a text file:</p>\n<p style=\"padding-left: 30px;\">$ nc -lvp 4444 &gt; output.txt</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L04_NetcatTheAlmighty/.images/listen_redirect.png\" alt=\"\" width=\"482\" height=\"70\" /></p>\n<p>Then, from Bob's container, let's create a text file, connect to Alice's computer and send the file.</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L04_NetcatTheAlmighty/.images/send_text_file.png\" alt=\"\" width=\"474\" height=\"104\" /></p>\n<p>Now, inside Alice's container, check that the file has been correctly received:</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L04_NetcatTheAlmighty/.images/file_transferred.png\" alt=\"\" width=\"456\" height=\"56\" /></p>\n<p>Got it!</p>\n<h3>Remote administration: Bind Shell Scenario</h3>\n<p>One of Netcat's key features is command redirection: it can redirect an executable file's stdin/stdout/stderr to a TCP/UDP port. If we bind, for example, /bin/bash to a local port, any computer connecting to this port will be presented with a shell that belongs to this computer.</p>\n<p>Go to alice's machine and bind /bin/bash to a TCP port which Bob will connect to later.</p>\n<p style=\"padding-left: 30px;\">$&nbsp; nc -lvvp 4444 -e /bin/bash</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L04_NetcatTheAlmighty/.images/bind_shell_bob.png\" alt=\"\" width=\"640\" height=\"95\" /></p>\n<p>Now go to Bob's container and connect to port 4444.</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L04_NetcatTheAlmighty/.images/bind_shell_alice.png\" alt=\"\" width=\"649\" height=\"373\" /></p>\n<p>As you can see, after the connection you are presented with Alice's command line and typing $ifconfig will show Alice's network configuration.</p>\n<h3>Remote administration: Reverse shell scenario</h3>\n<p>Another useful feature is the ability to send a command shell to a listening host. This is the most common way to create a backdoor once privilege escalation is completed.</p>\n<p>Let's set up Bob's Netcat to listen on TCP port 4444.</p>\n<p style=\"padding-left: 30px;\">$ nc -lvvp 4444</p>\n<p>Then go to Alice's command line and send a shell to Bob</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L04_NetcatTheAlmighty/.images/reverse_shell_alice.png\" alt=\"\" width=\"446\" height=\"79\" /></p>\n<p>Now, on Bob's container, we are able to type commands in Alice's shell:</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L04_NetcatTheAlmighty/.images/reverse_shell_bob.png\" alt=\"\" width=\"688\" height=\"441\" /></p>\n<p>Owned!</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>","readme":"","author":"dsp"}
