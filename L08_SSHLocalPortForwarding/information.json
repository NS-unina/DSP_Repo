{"description":"Learn how to create an SSH tunnel with Local Port Forwarding","goal":"","solution":"<p>The SSH protocol, amongst its several features, allows us to create encrypted tunnels over bi-directional communication channels.This feature has important implications both for penetration testers and secuity administrators.</p>\n<h2>Local Port Forwarding</h2>\n<p>SSH local port forwarding allows us to tunnel a local port to a remote server, using SSH as the transport protocol. It has many similarities with the Port Forwarding/Redirection technique, which allows to accept traffic on a given IP address and a given port and simply redirect it to a different IP address and port.</p>\n<p>Let's consider a scenario where we are located in a network that allows outbound traffic only on a specific port. This can be done with a firewall that protects an internal network.</p>\n<p>In the network showed above, a client is behind a firewall which forbids him to visit a music web server listening on port 80.</p>\n<p>Fortunately, we can set up an sshd server at home, listening on port 22. We can create a \"permitted\" outbound connection to our sshd server, which will not be filtered by the firewall. Next, we ask our sshd server to connect to the music web server (because he can!) and simply redirect all traffic to our host, which is configured for listening on a specified port.</p>\n<p>&nbsp;</p>\n<p>The syntax is the following:</p>\n<p style=\"padding-left: 30px;\">$ ssh &lt;gateway&gt; -L &lt;local port to listen&gt;:&lt;remote host IP address&gt;:&lt;remote port&gt;</p>\n<p>&nbsp;</p>\n<p>In our case, the client uses a Firefox browser, but can't connect to the web browser on the right. We can prove that by trying to open the homepage of the music server.</p>\n<p>Let's get access to the firefox container using the following address <a title=\"http://{{hostname}}:5800/ \" href=\"http://{{hostname}}:5800\" target=\"_blank\" rel=\"noopener noreferrer\">http://{{hostname}}:5800/ </a>in OUR browser.</p>\n<p>&nbsp;<img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L08_SSHLocalPortForwarding/.images/no_ping.png\" width=\"1291\" height=\"714\" /></p>\n<p>Then, in the browser inside our browser (mindblow!!!), we can try accessing, without any success, to the music server, <a href=\"http://193.20.2.3:80\">http://193.20.2.3:80</a></p>\n<p>&nbsp;<img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L08_SSHLocalPortForwarding/.images/firefox_music.png\" alt=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L08_SSHLocalPortForwarding/.images/firefox_music.png\" width=\"1302\" height=\"783\" /></p>\n<p>no answer...</p>\n<p>&nbsp;</p>\n<p>Let's go to our firefox client, open a shell and perform a local port forwarding.</p>\n<p style=\"padding-left: 30px;\">$ ssh -4 -L 9000:193.20.2.3:80 <a href=\"mailto:sshuser@193.20.4.2\">sshuser@193.20.4.2</a></p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L08_SSHLocalPortForwarding/.images/local_port_forwarding.png\" width=\"705\" height=\"321\" />&nbsp;</p>\n<p>We are telling our sshd server at home to connect to the webserver on our behalf and redirect all traffic to our host, which will be listening on port 9000.</p>\n<p>The sshuser is already configured. The password is \"sshuser\".</p>\n<p>Now if we check our firefox container, it will look like it is HOSTING a music webserver listening on port 9000.</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L08_SSHLocalPortForwarding/.images/localhost_local.png\" width=\"1296\" height=\"780\" /></p>\n<p>Voil&agrave;!</p>\n<p style=\"padding-left: 30px;\">&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>","readme":"","author":"dsp"}
